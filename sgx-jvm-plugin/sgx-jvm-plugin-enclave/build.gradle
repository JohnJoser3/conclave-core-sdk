plugins {
    id 'java-gradle-plugin'
    id 'org.jetbrains.kotlin.jvm'
}

gradlePlugin {
    plugins {
        sgxEnclavePlugin {
            id = 'com.r3.sgx.enclave'
            implementationClass = 'com.r3.sgx.plugin.enclave.SgxEnclavePlugin'
        }
    }
}

tasks.withType(Test) {
    // Tell the tests where Gradle's current module cache is.
    // We need the tests to share this module cache to prevent the
    // Gradle Test-Kit from downloading its own copy of Kotlin etc.
    systemProperty 'test.gradle.user.home', project.gradle.gradleUserHomeDir
}

dependencies {
    // This plugin will use Gradle's own built-in Kotlin library at runtime.
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    implementation "com.github.jengelman.gradle.plugins:shadow:$shadow_version"
    implementation "net.fornwall:jelf:0.4.4"
    implementation "commons-io:commons-io:2.6"

    testImplementation "junit:junit:$junit_version"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.assertj:assertj-core:$assertj_version"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        apiVersion = '1.3'
        languageVersion = '1.3'
        freeCompilerArgs = ['-Xjvm-default=enable']
    }
}

jar {
    manifest {
        // TODO(mike): Simplify how we handle versioning. Do we really need this to be passed in via environment vars?
        def ver = rootProject.environment.OBLIVIUM_DEPENDENCY_VERSION
        if (ver == null) ver = "Unknown"  // Probably syncing in an IDE that's outside the devenv container.
        attributes("Conclave-Version": ver)
    }
}

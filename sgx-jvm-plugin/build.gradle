plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.20' apply false
}

import static org.gradle.api.JavaVersion.*
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

static Map<String, String> createEnvironment(String... names) {
    Map<String, String> environment = names.collectEntries { [(it): System.getenv(it)] }
    def nullKeys = environment.findAll { it.value == null }.keySet()
    if (!nullKeys.isEmpty()) {
        throw new IllegalStateException("The following environment variables must be specified: $nullKeys")
    }
    return environment
}

ext {
    environment = createEnvironment(
            'OBLIVIUM_VERSION',
            'OBLIVIUM_DEPENDENCY_VERSION',
            'OBLIVIUM_MAVEN_URL',
            'OBLIVIUM_MAVEN_REPOSITORY',
            'OBLIVIUM_MAVEN_USERNAME',
            'OBLIVIUM_MAVEN_PASSWORD',
            'OBLIVIUM_CONTAINER_REGISTRY_URL'
    )
}

subprojects {
    apply plugin: 'kotlin'

    repositories {
        mavenCentral()
        jcenter()
    }

    group = "com.r3.sgx"
    version = environment.OBLIVIUM_VERSION

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            jvmTarget = VERSION_1_8
            apiVersion = '1.3'
            languageVersion = '1.3'
            freeCompilerArgs = ['-Xjvm-default=enable']
        }
    }

    tasks.withType(Test) {
        // Tell the tests where Gradle's current module cache is.
        // We need the tests to share this module cache to prevent the
        // Gradle Test-Kit from downloading its own copy of Kotlin etc.
        systemProperty 'test.gradle.user.home', project.gradle.gradleUserHomeDir
    }
}

/* ---- PUBLISHING ---- */
class PublishedProject {
    String projectPath
    String description
    boolean shouldPublishSource
}
List<PublishedProject> publishedProjects = [
        new PublishedProject(
                projectPath: ':sgx-jvm-plugin-enclave',
                description: 'The Oblivium SGX Enclave plugin',
                shouldPublishSource: true
        ),
        new PublishedProject(
                projectPath: ':sgx-jvm-plugin-host',
                description: 'The Oblivium SGX Host plugin',
                shouldPublishSource: true
        )
]

for (published in publishedProjects) {
    def subproject = project(published.projectPath)
    def description = published.description
    def shouldPublishSource = published.shouldPublishSource
    subproject.pluginManager.apply('java')
    subproject.pluginManager.apply('maven-publish')
    if (shouldPublishSource) {
        subproject.tasks.create('sourcesJarForPublish', Jar) {
            archiveClassifier = 'sources'
            from subproject.sourceSets.main.allSource
        }
    }
    subproject.publishing {
        publications {
            create(subproject.name, MavenPublication) {
                from subproject.components.java

                groupId subproject.group
                artifactId subproject.name
                pom.description = description

                if (shouldPublishSource) {
                    artifact subproject.tasks.getByName('sourcesJarForPublish')
                }
            }
        }
        repositories {
            maven {
                url = "${environment.OBLIVIUM_MAVEN_URL}/${environment.OBLIVIUM_MAVEN_REPOSITORY}"
                credentials {
                    username = environment.OBLIVIUM_MAVEN_USERNAME
                    password = environment.OBLIVIUM_MAVEN_PASSWORD
                }
            }
        }
    }
}

wrapper {
    gradleVersion = "5.2.1"
    distributionType = Wrapper.DistributionType.ALL
}

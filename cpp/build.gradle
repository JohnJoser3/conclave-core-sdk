import javax.inject.Inject

apply plugin: "base"
apply plugin: "maven-publish"

def types = ["Simulation", "Debug", "Release"]

configurations {
    javah_host
    javah_enclave
}

dependencies {
    javah_host project(":api-core:api-core-host")
    javah_enclave project(":api-core:api-core-enclave")
}

task generateHostJniHeaders(type: Javah, constructorArgs: ['com.r3.sgx.core.host.internal.Native']) {
    dependsOn(configurations["javah_host"])
    inputJar = configurations["javah_host"].files.first()
    outputHeader = file("$projectDir/jvm-host/include/host_jni.h")
}

task generateEnclaveJniHeaders(type: Javah, constructorArgs: ['com.r3.sgx.core.enclave.internal.Native']) {
    dependsOn(configurations["javah_enclave"])
    inputJar = configurations["javah_enclave"].files.first()
    outputHeader = file("$projectDir/jvm-enclave-common/include/enclave_jni.h")
}

String buildDirectory(type) { return "$buildDir/$type" }
static String createCmakeTaskName(type) { return "createCmakeBuild$type" }
static String compileTaskNameEnclave(type) { return "compileEnclave$type" }
static String compileTaskNameHost(type) { return "compileHost$type" }
static String compileTaskNameLinuxSgx(type) { return "compileLinuxSgx$type" }
static String compileTaskNameBinutilsLd(type) { return "compileBinutilsLd$type" }

for (type in types) {
    // Use Cmake to create build
    tasks.create(createCmakeTaskName(type), Exec) {
        workingDir(buildDirectory(type))

        commandLine("/usr/bin/env", "cmake", "-DCMAKE_BUILD_TYPE=$type", projectDir)

        inputs.files(
                "$projectDir/CMakeLists.txt",
                "$projectDir/*/CMakeLists.txt"
        )

        outputs.files(
                "${buildDirectory(type)}/Makefile"
        )
    }

    // Build the enclave object
    tasks.create(compileTaskNameEnclave(type), Exec) {
        dependsOn(compileTaskNameLinuxSgx(type), createCmakeTaskName(type), generateEnclaveJniHeaders)

        workingDir(buildDirectory(type))

        commandLine("/usr/bin/env", "cmake",
                "--build", buildDirectory(type),
                "--target", "jvm_enclave_avian",
                "--", "-j4"
        )

        inputs.files(
                "${buildDirectory(type)}/Makefile"
        )
        // May need to add more here, for now this is good enough
        inputs.dir("$projectDir/avian/src") // src/ because avian puts stuff in avian/build/, failing the up-to-date check
        inputs.dir("$projectDir/jvm-edl")
        inputs.dir("$projectDir/jvm-enclave-avian")
        inputs.dir("$projectDir/jvm-enclave-common")
        inputs.dir("$projectDir/jvm-host-enclave-common")

        outputs.files("${buildDirectory(type)}/jvm-enclave-avian/jvm_enclave_avian")
    }

    // Build the host object
    tasks.create(compileTaskNameHost(type), Exec) {
        dependsOn(compileTaskNameLinuxSgx(type), createCmakeTaskName(type), generateHostJniHeaders)

        workingDir(buildDirectory(type))

        commandLine("/usr/bin/env", "cmake",
                "--build", buildDirectory(type),
                "--target", "jvm_host",
                "--", "-j4"
        )

        inputs.files(
                "${buildDirectory(type)}/Makefile"
        )
        inputs.dir("$projectDir/jvm-host")
        inputs.dir("$projectDir/jvm-host-enclave-common")
        outputs.files("${buildDirectory(type)}/jvm-host/libjvm_host.so")
    }

    tasks.create(compileTaskNameLinuxSgx(type), Exec) {
        dependsOn(createCmakeTaskName(type))

        workingDir(buildDirectory(type))

        commandLine("/usr/bin/env", "cmake",
                "--build", buildDirectory(type),
                "--target", "linux-sgx-ext",
                "--", "-j4"
        )

        inputs.files(
                "${buildDirectory(type)}/Makefile"
        )

        outputs.dir("${buildDirectory(type)}/linux-sgx")
    }

    tasks.create(compileTaskNameBinutilsLd(type), Exec) {
        dependsOn(createCmakeTaskName(type))

        workingDir(buildDirectory(type))

        commandLine("/usr/bin/env", "cmake",
                "--build", buildDirectory(type),
                "--target", "binutils-ext",
                "--", "-j4"
        )

        inputs.files(
                "${buildDirectory(type)}/Makefile"
        )

        outputs.dir("${buildDirectory(type)}/binutils")
    }
}

task cleanAvian(type: Delete) {
    delete "$projectDir/avian/build"
}

clean.finalizedBy cleanAvian

class Javah extends DefaultTask {
    final String nativeClass

    @OutputFile
    File outputHeader
    @InputFile
    File inputJar

    @Inject
    Javah(String nativeClass) {
        this.nativeClass = nativeClass
    }

    @TaskAction
    def run() {
        project.exec { spec ->
            spec.workingDir(temporaryDir)
            spec.commandLine("/usr/bin/env", "javah",
                "-o", outputHeader,
                "-cp", inputJar,
                nativeClass
            )
        }
    }
}

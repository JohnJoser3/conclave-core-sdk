diff --git a/buildenv.mk b/buildenv.mk
index 6291804..548c38c 100644
--- a/buildenv.mk
+++ b/buildenv.mk
@@ -116,7 +116,17 @@ COMMON_FLAGS += -Wall -Wextra -Winit-self -Wpointer-arith -Wreturn-type \
 		-Wcast-align -Wconversion -Wredundant-decls
 
 # additional warnings flags for C
-CFLAGS += -Wjump-misses-init -Wstrict-prototypes -Wunsuffixed-float-constants
+CFLAGS += -Wstrict-prototypes
+ifneq ($(shell uname -s),Darwin)
+        CFLAGS += -Wjump-misses-init -Wunsuffixed-float-constants
+endif
+
+# On macOS  (for sgx_sign) search in the Homebrew location for OpenSSL headers, as Apple
+# have deprecated OpenSSL and no longer ship its header files.
+ifeq ($(shell uname -s),Darwin)
+        COMMON_FLAGS += -I/usr/local/opt/openssl/include
+endif
+
 
 # additional warnings flags for C++
 CXXFLAGS += -Wnon-virtual-dtor
@@ -169,8 +179,15 @@ endif
 CFLAGS   += $(COMMON_FLAGS)
 CXXFLAGS += $(COMMON_FLAGS)
 
-# Enable the security flags
-COMMON_LDFLAGS := -Wl,-z,relro,-z,now,-z,noexecstack
+### Enable the security flags
+## For macOS:
+# By default, the stack and heap are marked as non-executable.
+# https://developer.apple.com/library/archive/documentation/Security/Conceptual/SecureCodingGuide/Articles/BufferOverflows.html#//apple_ref/doc/uid/TP40002577-SW23
+#
+# relro removes the PT_GNU_RELRO header, which only applies to ELF.
+ifneq ($(shell uname -s),Darwin)
+    COMMON_LDFLAGS := -Wl,-z,relro,-z,now,-z,noexecstack
+endif
 
 # mitigation options
 MITIGATION_INDIRECT ?= 0
diff --git a/common/inc/internal/se_stdio.h b/common/inc/internal/se_stdio.h
index 433386e..0057647 100644
--- a/common/inc/internal/se_stdio.h
+++ b/common/inc/internal/se_stdio.h
@@ -112,7 +112,7 @@ static inline int se_copy_file(const char *dst_name, const char *src_name)
 
     while ((nr_read = read(source, buf, BUF_SIZE)) > 0)
     {
-        if (write(dest, buf, nr_read) != nr_read)
+        if (write(dest, buf, (size_t) nr_read) != nr_read)
             goto error;
     }
 #undef BUF_SIZE
diff --git a/common/inc/internal/se_trace.h b/common/inc/internal/se_trace.h
index 412cf23..c6316b6 100644
--- a/common/inc/internal/se_trace.h
+++ b/common/inc/internal/se_trace.h
@@ -55,7 +55,7 @@ typedef enum
 #ifdef __cplusplus
 extern "C" {
 #endif
-void se_trace_internal(int debug_level, const char *fmt, ...);
+void se_trace_internal(se_trace_t debug_level, const char *fmt, ...);
 void sgx_proc_log_report_default(int channel, int debug_level, const char* fmt, ...);
 void  __attribute__((weak)) sgx_proc_log_report(int level, const char* format, ...);
 #ifdef __cplusplus
diff --git a/common/src/se_trace.c b/common/src/se_trace.c
index dfe83e6..d37a273 100644
--- a/common/src/se_trace.c
+++ b/common/src/se_trace.c
@@ -47,7 +47,7 @@ void sgx_proc_log_report_default(int channel, int debug_level, const char *fmt,
     return;
 }
 
-void se_trace_internal(int debug_level, const char *fmt, ...)
+void se_trace_internal(se_trace_t debug_level, const char *fmt, ...)
 {
     va_list args;
 
diff --git a/download_prebuilt.sh b/download_prebuilt.sh
index 75aaa1d..5b62ae7 100755
--- a/download_prebuilt.sh
+++ b/download_prebuilt.sh
@@ -44,28 +44,28 @@ server_binutils_url=$server_url_path/$binutils_file_name
 server_checksum_url=$server_url_path/$checksum_file
 
 rm -f $out_dir/$optlib_name
-wget $server_optlib_url -P $out_dir
+curl $server_optlib_url -o $out_dir/$optlib_name
 if [ $? -ne 0 ]; then
     echo "Fail to download file $server_optlib_url"
     exit -1
 fi
 
 rm -f $out_dir/$ae_file_name
-wget $server_ae_url -P $out_dir
+curl $server_ae_url -o $out_dir/$ae_file_name
 if [ $? -ne 0 ]; then
     echo "Fail to download file $server_ae_url"
     exit -1
 fi
 
 rm -f $out_dir/$binutils_file_name
-wget $server_binutils_url -P $out_dir
+curl $server_binutils_url -o $out_dir/$binutils_file_name
 if [ $? -ne 0 ]; then
     echo "Fail to download file $server_binutils_url"
     exit -1
 fi
 
 rm -f $out_dir/$checksum_file
-wget $server_checksum_url -P $out_dir
+curl $server_checksum_url -o $out_dir/$checksum_file
 if [ $? -ne 0 ]; then
     echo "Fail to download file $server_checksum_url"
     exit -1
@@ -74,7 +74,7 @@ fi
 
 pushd $out_dir
 
-sha256sum -c $checksum_file
+shasum -a 256 -c $checksum_file
 if [ $? -ne 0 ]; then
     echo "Checksum verification failure"
     exit -1
diff --git a/external/dcap_source b/external/dcap_source
--- a/external/dcap_source
+++ b/external/dcap_source
@@ -1 +1 @@
-Subproject commit 30fac05232e13eab72c425a7788fafa5a46b3247
+Subproject commit 30fac05232e13eab72c425a7788fafa5a46b3247-dirty
diff --git a/external/openmp/openmp_code b/external/openmp/openmp_code
--- a/external/openmp/openmp_code
+++ b/external/openmp/openmp_code
@@ -1 +1 @@
-Subproject commit c9e7fc8c97382d61565f7ed180e4ea1cc8895b95
+Subproject commit c9e7fc8c97382d61565f7ed180e4ea1cc8895b95-dirty
diff --git a/external/tinyxml2/tinyxml2.h b/external/tinyxml2/tinyxml2.h
index 5e3274f..925a3af 100644
--- a/external/tinyxml2/tinyxml2.h
+++ b/external/tinyxml2/tinyxml2.h
@@ -595,7 +595,7 @@ public:
         TIXMLASSERT( p );
         TIXMLASSERT( q );
         TIXMLASSERT( nChar >= 0 );
-        return strncmp( p, q, nChar ) == 0;
+        return strncmp( p, q, (size_t) nChar ) == 0;
     }
 
     inline static bool IsUTF8Continuation( char p ) {
diff --git a/psw/urts/linux/isgx_user.h b/psw/urts/linux/isgx_user.h
index 007dfd8..62ff1ab 100644
--- a/psw/urts/linux/isgx_user.h
+++ b/psw/urts/linux/isgx_user.h
@@ -60,9 +60,14 @@
 #ifndef _UAPI_ASM_X86_SGX_H
 #define _UAPI_ASM_X86_SGX_H
 
-
-#include <linux/types.h>
-#include <linux/ioctl.h>
+#ifdef __linux__
+	#include <linux/types.h>
+	#include <linux/ioctl.h>
+#else
+	#include <sys/types.h>
+	typedef __uint64_t __u64;
+	typedef __uint16_t __u16;
+#endif
 
 #define SGX_MAGIC 0xA4
 
diff --git a/psw/urts/parser/Makefile b/psw/urts/parser/Makefile
index b8ebe9e..ec9d84a 100644
--- a/psw/urts/parser/Makefile
+++ b/psw/urts/parser/Makefile
@@ -49,7 +49,8 @@ TARGET := libenclaveparser.a
 
 CXXFLAGS += -fPIC
 
-ifneq ($(HOST_OS), darwin)
+UNAME := $(shell uname -s)
+ifneq ($(UNAME), Darwin)
   CXXFLAGS += -Werror
 endif
 
diff --git a/psw/urts/parser/elfparser.cpp b/psw/urts/parser/elfparser.cpp
index 6e42925..2a80db0 100644
--- a/psw/urts/parser/elfparser.cpp
+++ b/psw/urts/parser/elfparser.cpp
@@ -438,7 +438,7 @@ bool validate_segment(const ElfW(Ehdr) *elf_hdr, uint64_t len)
     assert(sizeof(ElfW(Phdr)) == elf_hdr->e_phentsize);
 
     std::vector< std::pair<ElfW(Addr), ElfW(Addr)> > load_seg(elf_hdr->e_phnum, std::make_pair(0, 0));
-    int k = 0;
+    std::vector< std::pair<ElfW(Addr), ElfW(Addr)> >::size_type k = 0;
 
     for (int idx = 0; idx < elf_hdr->e_phnum; idx++, prg_hdr++)
     {
@@ -461,7 +461,7 @@ bool validate_segment(const ElfW(Ehdr) *elf_hdr, uint64_t len)
             load_seg[k].first = prg_hdr->p_vaddr;
             load_seg[k].second = ROUND_TO(prg_hdr->p_vaddr + prg_hdr->p_memsz, prg_hdr->p_align) - 1;
 
-            for (int j = 0; j < k; j++)
+            for (std::vector< std::pair<ElfW(Addr), ElfW(Addr)> >::size_type j = 0; j < k; j++)
             {
                 if (is_overlap(load_seg[k], load_seg[j]))
                 {
diff --git a/sdk/sign_tool/SignTool/Makefile b/sdk/sign_tool/SignTool/Makefile
index 8610f85..a61f682 100644
--- a/sdk/sign_tool/SignTool/Makefile
+++ b/sdk/sign_tool/SignTool/Makefile
@@ -31,12 +31,18 @@
 
 include ../../../buildenv.mk
 
-CXXFLAGS += -Werror
+UNAME := $(shell uname -s)
+ifeq ($(UNAME),Darwin)
+        CXXFLAGS += -mmacosx-version-min=10.15
+else
+        CXXFLAGS += -Werror
+        LDFLAGS := -pie
+endif
 CFLAGS   += -Werror
 
 CFLAGS += -fpie
 CXXFLAGS += -fpie
-LDFLAGS := -pie $(COMMON_LDFLAGS)
+LDFLAGS := $(COMMON_LDFLAGS)
 
 INC += $(ADDED_INC)
 INC +=  -I$(COMMON_DIR)/inc                         \
@@ -80,9 +86,15 @@ all: sgx_sign | $(BUILD_DIR)
 $(BUILD_DIR):
 	@$(MKDIR) $@
 
-sgx_sign: PRIVATE_LDLIBS  := -lpthread -lenclaveparser -lcrypto
+sgx_sign: PRIVATE_LDLIBS  := -lpthread -lenclaveparser
 sgx_sign: PRIVATE_LDFLAGS := -L$(LINUX_PSW_DIR)/urts/parser $(LDFLAGS)
 
+ifeq ($(UNAME),Darwin)
+    sgx_sign: PRIVATE_LDLIBS += /usr/local/opt/openssl/lib/libcrypto.a
+else
+    sgx_sign: PRIVATE_LDLIBS += -lcrypto
+endif
+
 sgx_sign: $(OBJS) enclaveparser
 	$(CXX) $(CXXFLAGS) $(OBJS) $(PRIVATE_LDFLAGS) $(PRIVATE_LDLIBS) -o $@
 
diff --git a/sdk/sign_tool/SignTool/manage_metadata.cpp b/sdk/sign_tool/SignTool/manage_metadata.cpp
index 6956b74..9be3fa8 100644
--- a/sdk/sign_tool/SignTool/manage_metadata.cpp
+++ b/sdk/sign_tool/SignTool/manage_metadata.cpp
@@ -233,7 +233,7 @@ bool CMetadata::get_time(uint32_t *date)
     struct tm *timeinfo = gmtime(&rawtime);
     if(timeinfo  == NULL)
         return false;
-    uint32_t tmp_date = (timeinfo->tm_year+1900)*10000 + (timeinfo->tm_mon+1)*100 + timeinfo->tm_mday;
+    uint32_t tmp_date = (uint32_t)((timeinfo->tm_year+1900)*10000 + (timeinfo->tm_mon+1)*100 + timeinfo->tm_mday);
     std::stringstream ss;
     ss<<"0x"<<tmp_date;
     ss>>std::hex>>tmp_date;
@@ -256,7 +256,7 @@ bool CMetadata::fill_enclave_css(const xml_parameter_t *para)
 
     // For 'type', signing tool clears the bit 31 for product enclaves 
     // and set the bit 31 for debug enclaves
-    m_metadata->enclave_css.header.type = (para[RELEASETYPE].value & 0x01) ? (1<<31) : 0;
+    m_metadata->enclave_css.header.type = (unsigned int)((para[RELEASETYPE].value & 0x01) ? (1<<31) : 0);
     m_metadata->enclave_css.header.module_vendor = (para[INTELSIGNED].value&0x01) ? 0x8086 : 0;
     m_metadata->enclave_css.header.date = date;
 
@@ -711,7 +711,7 @@ bool CMetadata::build_layout_table()
     const Section *section = m_parser->get_tls_section();
     if(section)
     {
-        layout.entry.page_count += (uint32_t)(ROUND_TO_PAGE(section->virtual_size()) >> SE_PAGE_SHIFT);
+        layout.entry.page_count += (uint32_t)((unsigned long long)ROUND_TO_PAGE((unsigned long long)section->virtual_size()) >> SE_PAGE_SHIFT);
     }
     layout.entry.attributes = PAGE_ATTR_EADD | PAGE_ATTR_EEXTEND;
     layout.entry.si_flags = SI_FLAGS_RW;

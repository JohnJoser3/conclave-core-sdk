plugins {
    id 'org.jetbrains.kotlin.jvm'
}

dependencies {
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"
}

test {
    dependsOn ':cpp:linux-sgx:linux-sgx-simulation:jar', ':cpp:linux-sgx:linux-sgx-debug:jar', ':cpp:linux-sgx:linux-sgx-release:jar'
    doFirst {
        systemProperty 'simulation-jar.path', tasks.getByPath(':cpp:linux-sgx:linux-sgx-simulation:jar').outputs.files.asPath
        systemProperty 'debug-jar.path', tasks.getByPath(':cpp:linux-sgx:linux-sgx-debug:jar').outputs.files.asPath
        systemProperty 'release-jar.path', tasks.getByPath(':cpp:linux-sgx:linux-sgx-release:jar').outputs.files.asPath
    }
}


def cppBuildDir = project(":cpp").buildDir

subprojects {
    apply plugin: 'java'

    def type = name.drop("linux-sgx-".size()).capitalize()
    tasks.getByName("jar") { Jar task ->
        task.dependsOn(":cpp:compileLinuxSgx$type")
        def sgxSdkDir = "$cppBuildDir/$type/linux-sgx/linux-sgx-ext-prefix/src/linux-sgx-ext-build/sgxsdk"
        def sgxLibDir = "$sgxSdkDir/lib64"
        def sgxIncDir = "$sgxSdkDir/include"

        def simSuffix = type == "Simulation" ? "_sim" : ""
        task.into "com/r3/conclave/sgx/$type", {
            from (sgxIncDir) {
                include "tlibc/**/*"
                include "libcxx/**/*"
            }
            from (sgxLibDir) {
                include "libsgx_pthread.a"
                include "libsgx_tcrypto.a"
                include "libsgx_tcxx.a"
                include "libsgx_trts${simSuffix}.a"
                include "libsgx_tservice${simSuffix}.a"
                include "libsgx_tstdc.a"
            }
        }
    }
}

task setupSignToolCMakeBuild(type: Exec) {
    workingDir buildDir
    inputs.file("$projectDir/CMakeLists.txt")
    commandLine "/usr/bin/env", "cmake",
            "-DCMAKE_BUILD_TYPE=Release", projectDir
    outputs.file("$buildDir/Makefile")
}

def maxWorkers = properties["org.gradle.workers.max"]
task buildSgxSign(type: Exec) {
    dependsOn setupSignToolCMakeBuild
    environment["CMAKE_BUILD_PARALLEL_LEVEL"] = "$maxWorkers"
    workingDir buildDir
    commandLine "/usr/bin/env", "cmake",
            "--build", buildDir,
            "--target", "macos-sign-tool"
}

plugins {
    id 'org.jetbrains.kotlin.jvm'
}

dependencies {
    testImplementation project(":internal-testing")
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"
}

test {
    dependsOn ':cpp:linux-sgx:linux-sgx-simulation:jar', ':cpp:linux-sgx:linux-sgx-debug:jar', ':cpp:linux-sgx:linux-sgx-release:jar'
    doFirst {
        systemProperty 'simulation-jar.path', tasks.getByPath(':cpp:linux-sgx:linux-sgx-simulation:jar').outputs.files.asPath
        systemProperty 'debug-jar.path', tasks.getByPath(':cpp:linux-sgx:linux-sgx-debug:jar').outputs.files.asPath
        systemProperty 'release-jar.path', tasks.getByPath(':cpp:linux-sgx:linux-sgx-release:jar').outputs.files.asPath
    }
}


String cmakeBuildType = project.hasProperty("nativeDebug") ? "Debug" : "Release"
String cppBuildDir = "${project(":cpp").buildDir}/$cmakeBuildType"

subprojects {
    def enclaveMode = name.drop("linux-sgx-".size()).capitalize()
    tasks.getByName("jar") { Jar task ->
        task.dependsOn(":cpp:compileLinuxSgx$cmakeBuildType")

        String sgxSdkDir = "$cppBuildDir/linux-sgx/linux-sgx-ext-prefix/src/linux-sgx-ext-build/sgxsdk"
        String sgxLibDir = "$sgxSdkDir/lib64"
        String sgxIncDir = "$sgxSdkDir/include"

        String simSuffix = enclaveMode == "Simulation" ? "_sim" : ""

        task.into "com/r3/conclave/sgx/$enclaveMode", {
            from (sgxIncDir) {
                include "tlibc/**/*"
                include "libcxx/**/*"
            }
            from (sgxLibDir) {
                include "libsgx_pthread.a"
                include "libsgx_tcrypto.a"
                include "libsgx_tcxx.a"
                include "libsgx_trts${simSuffix}.a"
                include "libsgx_tservice${simSuffix}.a"
                include "libsgx_tstdc.a"
            }
        }
    }
}

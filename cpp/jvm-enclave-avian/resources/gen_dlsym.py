#!/usr/bin/env python2.7

# Generate a static symbol table suitable for an environment with no runtime dynamic linker.
# The table must be sorted as we scan it using a binary search.

import os
import sys

if len(sys.argv) < 4:
    print("Usage: python gen_dlsym.py "
          "<PATH_TO_template> <PATH_TO_output_cpp> <PATH_TO_output_txt> [<PATH_TO_lib.a>]")
    sys.exit(1)

template_path = sys.argv[1]
output_file_cpp = sys.argv[2]
output_file_txt = sys.argv[3]
lib_paths = sys.argv[4:]

os.system("echo '# This file lists all the JNI symbols that can be looked up. It was generated by "
          "gen_dlsym.py' >%s" % output_file_txt)
for lib_path in lib_paths:
    cmd = "nm --defined-only %s | awk '{print $3}' | egrep '^(Avian|Java|JVM)_.*' | grep -v .localalias" % lib_path
    os.system("%s >> %s" % (cmd, output_file_txt))

entries = [l.strip() for l in open(output_file_txt, "r").readlines() if not l.startswith("#")]
#TODO: investigate localalias symbols emitted by GCC
entries = [l for l in entries]
entries.sort()
template_lines = file(template_path).readlines()
externs_index = template_lines.index("// DECLARATIONS HERE\n")
externs = ["void %s();\n" % entry for entry in entries]
template_lines[externs_index:externs_index + 1] = externs
dispatch_entries = ["    DLSYM_ADD(%s);\n" % e for e in entries]
dispatch_entries_index = template_lines.index("// ENTRIES HERE\n")
template_lines[dispatch_entries_index:dispatch_entries_index + 1] = dispatch_entries
file(output_file_cpp, "w").writelines(template_lines)

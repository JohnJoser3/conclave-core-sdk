plugins {
    id 'org.jetbrains.kotlin.jvm'
}

dependencies {
    testImplementation project(":internal-testing")
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"
}

test {
    dependsOn ':cpp:native-substratevm:native-substratevm-simulation:jar', ':cpp:native-substratevm:native-substratevm-debug:jar', ':cpp:native-substratevm:native-substratevm-release:jar'
    doFirst {
        systemProperty 'simulation-jar.path', tasks.getByPath(':cpp:native-substratevm:native-substratevm-simulation:jar').outputs.files.asPath
        systemProperty 'debug-jar.path', tasks.getByPath(':cpp:native-substratevm:native-substratevm-debug:jar').outputs.files.asPath
        systemProperty 'release-jar.path', tasks.getByPath(':cpp:native-substratevm:native-substratevm-release:jar').outputs.files.asPath
    }
}

String cmakeBuildType = project.hasProperty("nativeDebug") ? "Debug" : "Release"
String cppBuildDir = "${project(":cpp").buildDir}/$cmakeBuildType"

subprojects {
    String enclaveMode = name.drop("native-substratevm-".size()).capitalize()

    tasks.getByName("jar") { Jar task ->
        task.dependsOn(":cpp:compileFatFsEnclave$cmakeBuildType")
        task.dependsOn(":cpp:compileSubstrateVMLib$cmakeBuildType")
        task.dependsOn(":cpp:compileJvmEnclaveCommon$cmakeBuildType")
        task.dependsOn(":cpp:compileJvmEdl$cmakeBuildType")

        String substrateVmBuildDir = "$cppBuildDir/substratevm"
        String fatfsEnclaveBuildDir = "$cppBuildDir/fatfs/enclave"
        String jvmEdlBuildDir = "$cppBuildDir/jvm-edl"
        String jvmCommonBuildDir = "$cppBuildDir/jvm-host-enclave-common"
        String jvmEnclaveCommonBuildDir = "$cppBuildDir/jvm-enclave-common"
        String zlibBuildDir = "$cppBuildDir/zlib/zlib-ext-prefix/src/zlib-ext-build"

        task.into "com/r3/conclave/substratevm/$enclaveMode", {
            from(substrateVmBuildDir) {
                include "libsubstratevm.a"
            }
            from(fatfsEnclaveBuildDir) {
                include "libfatfs_enclave.a"
            }
            from(jvmEdlBuildDir) {
                include "libjvm_enclave_edl.a"
            }
            from(jvmCommonBuildDir) {
                include "libjvm_host_enclave_common_enclave.a"
            }
            from(jvmEnclaveCommonBuildDir) {
                include "libjvm_enclave_common_${enclaveMode.toLowerCase()}.a"
                rename "libjvm_enclave_common_${enclaveMode.toLowerCase()}.a", "libjvm_enclave_common.a"
            }
            from (zlibBuildDir) {
                include "libz.a"
            }
        }

    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm'
}

dependencies {
    testImplementation project(":internal-testing")
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"
}

test {
    dependsOn ':cpp:native-substratevm:native-substratevm-simulation:jar', ':cpp:native-substratevm:native-substratevm-debug:jar', ':cpp:native-substratevm:native-substratevm-release:jar'
    doFirst {
        systemProperty 'simulation-jar.path', tasks.getByPath(':cpp:native-substratevm:native-substratevm-simulation:jar').outputs.files.asPath
        systemProperty 'debug-jar.path', tasks.getByPath(':cpp:native-substratevm:native-substratevm-debug:jar').outputs.files.asPath
        systemProperty 'release-jar.path', tasks.getByPath(':cpp:native-substratevm:native-substratevm-release:jar').outputs.files.asPath
    }
}

def cppBuildDir = project(":cpp").buildDir

subprojects {
    apply plugin: 'java'

    def type = name.drop("native-substratevm-".size()).capitalize()
    tasks.getByName("jar") { Jar task ->
        task.dependsOn(":cpp:compileSubstrateVMLib$type")
        def substrateVmBuildDir = "$cppBuildDir/$type/substratevm"
        def jvmEdlBuildDir = "$cppBuildDir/$type/jvm-edl"
        def jvmCommonBuildDir = "$cppBuildDir/$type/jvm-host-enclave-common"
        def jvmEnclaveCommonBuildDir = "$cppBuildDir/$type/jvm-enclave-common"
        def zlibBuildDir = "$cppBuildDir/$type/zlib/zlib-ext-prefix/src/zlib-ext-build"

        task.into "com/r3/conclave/substratevm/$type", {
            from(substrateVmBuildDir) {
                include "libsubstratevm.a"
            }
            from(jvmEdlBuildDir) {
                include "libjvm_enclave_edl.a"
            }
            from(jvmCommonBuildDir) {
                include "libjvm_host_enclave_common_enclave.a"
            }
            from(jvmEnclaveCommonBuildDir) {
                include "libjvm_enclave_common.a"
            }
            from (zlibBuildDir) {
                include "libz.a"
            }
        }

    }
}

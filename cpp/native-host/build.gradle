plugins {
    id 'org.jetbrains.kotlin.jvm'
}

dependencies {
    testImplementation project(":internal-testing")
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"
}

test {
    dependsOn ':cpp:native-host:native-host-simulation:jar', ':cpp:native-host:native-host-debug:jar', ':cpp:native-host:native-host-release:jar'
    doFirst {
        systemProperty 'simulation-jar.path', tasks.getByPath(':cpp:native-host:native-host-simulation:jar').outputs.files.asPath
        systemProperty 'debug-jar.path', tasks.getByPath(':cpp:native-host:native-host-debug:jar').outputs.files.asPath
        systemProperty 'release-jar.path', tasks.getByPath(':cpp:native-host:native-host-release:jar').outputs.files.asPath
    }
}

String cmakeBuildType = project.hasProperty("nativeDebug") ? "Debug" : "Release"
String cppBuildDir = "${project(":cpp").buildDir}/$cmakeBuildType"

subprojects { Project project ->
    def enclaveMode = project.name.drop("native-host-".size()).capitalize()
    project.tasks.getByName("jar") { Jar task ->
        task.dependsOn(":cpp:compileLinuxSgx$cmakeBuildType")
        task.dependsOn(":cpp:compileHost$cmakeBuildType")

        String linuxSgxBuildDir = "$cppBuildDir/linux-sgx/src/linux-sgx/build/linux"
        String linuxAzurePluginDir = "$cppBuildDir/../../../azure-plugin"
        String linuxSgxQuoteGenBuildDir = "$cppBuildDir/linux-sgx/src/linux-sgx/external/dcap_source/QuoteGeneration/build/linux"
        String hostBuildDir = "$cppBuildDir/jvm-host"
        String libDir = "/usr/lib/x86_64-linux-gnu"

        String simSuffix = enclaveMode == "Simulation" ? "_sim" : ""

        task.into "com/r3/conclave/host-libraries/$enclaveMode", {
            from (linuxSgxBuildDir) {
                include "libsgx_enclave_common.so"
                rename "libsgx_enclave_common.so", "libsgx_enclave_common.so.1"
                include "libsgx_epid${simSuffix}.so"
                rename "libsgx_epid${simSuffix}.so", "libsgx_epid${simSuffix}.so.1"
                include "libsgx_launch${simSuffix}.so"
                rename "libsgx_launch${simSuffix}.so", "libsgx_launch${simSuffix}.so.1"
                include "libsgx_urts${simSuffix}.so"
                include "libsgx_uae_service${simSuffix}.so"
                include "libsgx_qe3.signed.so"
                include "libsgx_id_enclave.signed.so"
                include "libsgx_pce.signed.so"
            }
            from (hostBuildDir) {
                include "libjvm_host${simSuffix}.so"
                rename "libjvm_host${simSuffix}.so", "libjvm_host.so"
            }
            from (libDir) {
                include "libcrypto.so"
            }
            from (linuxSgxQuoteGenBuildDir) {
                include "libsgx_qe3_logic.so"
                include "libsgx_id_enclave.signed.so"
                include "libsgx_pce_logic.so"
                include "libsgx_dcap_ql.so"
                rename "libsgx_dcap_ql.so", "libsgx_dcap_ql.so.1"
            }
	        from (linuxAzurePluginDir) {
                include "libdcap_quoteprov.so"
                rename "libdcap_quoteprov.so", "libdcap_quoteprov.so.1"
            }
            if (enclaveMode != "Simulation") {
                from (libDir) {
                    include "libprotobuf.so"
                }
            }
        }
    }
}

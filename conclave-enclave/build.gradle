plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm'
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

configurations {
    testConf {
        transitive = false
    }
}

dependencies {
    api project(":conclave-common")

    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    implementation "org.graalvm.sdk:graal-sdk:$graal_version"

    testImplementation project(":internal-testing")
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter_version"
    // ASM: byte code manipulation library
    testImplementation "org.ow2.asm:asm:$asm_version"

    testConf project(":conclave-client")
}

// This task is needed by :internal-testing for quickly generating dynamic test enclaves. Normally the shadowJar task
// does exactly what we want here but it's been configured to shade Kotlin and Jackson instead.
task fatJar(type: ShadowJar) {
    archiveClassifier = 'fatjar'
    from sourceSets.main.output
    configurations = [
            project.configurations.runtimeClasspath,
            project(":conclave-common").configurations.compileClasspath
    ]
}

test {
    dependsOn(configurations.testConf)
    systemProperty 'conclave-enclave.test-jar', configurations.testConf.asPath
    doFirst {
        if (!configurations.testRuntimeClasspath.disjoint(configurations.testConf)) {
            throw new GradleException("${configurations.testConf.asPath} is now on the test classpath. Choose a dependency " +
                    "which is not and update the c.r.c.e.internal.memory tests accordingly.")
        }
    }
}

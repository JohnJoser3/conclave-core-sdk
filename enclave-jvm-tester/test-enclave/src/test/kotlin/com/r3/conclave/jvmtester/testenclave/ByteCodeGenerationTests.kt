package com.r3.conclave.jvmtester.testenclave

import com.google.protobuf.ByteString
import com.r3.sgx.core.common.ChannelInitiatingHandler
import com.r3.sgx.core.common.Sender
import com.r3.sgx.core.host.EnclaveHandle
import com.r3.sgx.core.host.EnclaveLoadMode
import com.r3.sgx.core.host.NativeHostApi
import com.r3.conclave.jvmtester.testenclave.messages.MessageType
import com.r3.conclave.jvmtester.api.proto.ByteCodeRequest
import com.r3.conclave.jvmtester.api.proto.SendJar
import com.r3.sgx.testing.MockEnclaveHandle
import com.r3.sgx.testing.RootHandler
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeAll
import org.junit.jupiter.api.Test
import java.io.File
import java.nio.file.Paths
import java.util.function.Consumer

class ByteCodeGenerationTests {
    companion object {
        private lateinit var enclaveHandle: EnclaveHandle<RootHandler.Connection>
        private val hostHandler = HostHandler(Paths.get(System.getProperty("bytecode.path")))
        private lateinit var enclaveSender: Sender

        private val sgxMode = EnclaveTests.sgxMode

        @JvmStatic
        @BeforeAll
        fun setUp() {
            enclaveHandle = if (sgxMode.toUpperCase() == "MOCK") {
                MockEnclaveHandle(RootHandler(), TestEnclave())
            } else {
                val hostApi = NativeHostApi(EnclaveLoadMode.valueOf(sgxMode.toUpperCase()))
                hostApi.createEnclave(RootHandler(), File(DJVMUnitTestSuite.enclavePath), "com.r3.conclave.jvmtester.testenclave.TestEnclave")
            }
            val connection = enclaveHandle.connection
            val channels = connection.addDownstream(ChannelInitiatingHandler())
            val (_, sender) = channels.addDownstream(hostHandler).get()
            enclaveSender = sender

            val userJar = HostTests.mathsJarPath.toFile().readBytes()
            val sendJarBytes = SendJar.newBuilder()
                    .setData(ByteString.copyFrom(userJar))
                    .build()
                    .toByteArray()
            sender.send(Int.SIZE_BYTES + sendJarBytes.size, Consumer { buffer ->
                buffer.putInt(MessageType.JAR.ordinal)
                buffer.put(sendJarBytes)
            })
        }

        @Suppress("unused")
        @JvmStatic
        @AfterAll
        fun destroy() {
            enclaveSender.send(Int.SIZE_BYTES, Consumer { buffer ->
                buffer.putInt(MessageType.CLEAR_JARS.ordinal)
            })
            // destroy can trigger an assertion failure in Avian
//            enclaveHandle.destroy()
        }
    }

    /**
     * Auxiliary code when comparing the DJVM generated bytecode between different JVMs
     */
    @Test
    fun testByteCodeGeneration() {
        val className = "java.lang.Math"
        val byteCodeRequest = ByteCodeRequest.newBuilder().setClassName(className).build().toByteArray()
        enclaveSender.send(Int.SIZE_BYTES + byteCodeRequest.size, Consumer { buffer ->
            buffer.putInt(MessageType.BYTECODE_DUMP.ordinal)
            buffer.put(byteCodeRequest)
        })
        assertThat(hostHandler.classesByteCodeReceived).contains("sandbox/$className".replace(".","/"))
    }

}
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

import static org.gradle.api.JavaVersion.VERSION_1_8

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.30' apply false
    id 'com.google.protobuf' version '0.8.12' apply false
    id 'com.r3.conclave.enclave' apply false
}

def modulesToSubstitute = [
        'com.r3.sgx:native-enclave-simulation',
        'com.r3.sgx:native-enclave-debug',
        'com.r3.sgx:native-enclave-release',
        'com.r3.sgx:native-host-simulation',
        'com.r3.sgx:native-host-debug',
        'com.r3.sgx:native-host-release',
        'com.r3.sgx:native-gdb',
        'com.r3.sgx:native-sign-tool',
        'com.r3.sgx:native-binutils',
        'com.r3.conclave:conclave-common',
        'com.r3.conclave:conclave-enclave',
        'com.r3.conclave:conclave-host',
        'com.r3.conclave:conclave-client',
        'com.r3.conclave:api-core-common',
        'com.r3.conclave:api-core-enclave',
        'com.r3.conclave:api-core-host',
        'com.r3.conclave:enclave-utils',
        'com.r3.conclave:enclave-testing',
        'com.r3.conclave:enclavelet-host-common'
]

def sgxModeProperty = project.property('sgx_mode')
subprojects {
    ext {
        sgxMode = sgxModeProperty
    }

    repositories {
        mavenCentral()
        // DJVM and determinist-rt
        maven { url 'https://software.r3.com/artifactory/corda-dependencies' }
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = VERSION_1_8
        targetCompatibility = VERSION_1_8
    }

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            jvmTarget = VERSION_1_8
            apiVersion = '1.3'
            languageVersion = '1.3'
            freeCompilerArgs = [ '-Xjvm-default=enable' ]
        }
    }

    tasks.withType(Test) {
        systemProperty 'sgx.mode', sgxModeProperty
        reports.junitXml.destination = file("$buildDir/$sgxModeProperty/test-results/test")
        reports.html.destination = file("$buildDir/$sgxModeProperty/test-results/html")
    }

    configurations {
        def version = System.getenv('PROJECT_VERSION')
        if (version != null) {
            if (version.empty) {
                version = "0.2-SNAPSHOT"
            }
            all {
                for (submodule in modulesToSubstitute) {
                    resolutionStrategy.dependencySubstitution {
                        substitute module(submodule) with module("$submodule:$version")
                    }
                }
            }
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
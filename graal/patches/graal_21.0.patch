diff --git a/substratevm/mx.substratevm/suite.py b/substratevm/mx.substratevm/suite.py
index f1b5a9f..723e65c 100644
--- a/substratevm/mx.substratevm/suite.py
+++ b/substratevm/mx.substratevm/suite.py
@@ -113,6 +113,10 @@ suite = {
                     }
                 }
             },
+        },
+        "JIMFS": {
+            "sha1": "5b311b772390a79700d1a0693d282cb88a19fb19",
+            "urls": ["file:filesystem.jar"]
         }
     },
 
@@ -159,6 +163,7 @@ suite = {
             ],
             "dependencies": [
                 "com.oracle.svm.util",
+                "JIMFS"
             ],
             "javaCompliance": "8+",
             "checkstyleVersion" : "8.8",
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java
index 37a4551..b155ed4 100644
--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java
@@ -420,6 +420,18 @@ public class SubstrateOptions {
     @Option(help = "Provide java.lang.Terminator exit handlers for executable images", type = User)//
     public static final HostedOptionKey<Boolean> InstallExitHandlers = new HostedOptionKey<>(false);
 
+    @Option(help = "Use static linking", type = OptionType.Expert)
+    public static final HostedOptionKey<Boolean> UseStaticLinking = new HostedOptionKey<>(false);
+
+    @Option(help = "Export symbols in linked static libraries", type = OptionType.Expert)
+    public static final HostedOptionKey<Boolean> ExportStaticSymbols = new HostedOptionKey<>(false);
+
+    @Option(help = "Default libraries to be excluded by the linker (list of comma-separated library names, i.e., dl,pthreads)", type = OptionType.Expert)
+    public static final HostedOptionKey<String[]> ExcludeLibraries = new HostedOptionKey<>(new String[]{});
+
+    @Option(help = "Exclude loading net library", type = OptionType.Expert)
+    public static final HostedOptionKey<Boolean> ExcludeLoadingNetwork = new HostedOptionKey<>(false);
+        
     @Option(help = "When set to true, the image generator verifies that the image heap does not contain a home directory as a substring", type = User)//
     public static final HostedOptionKey<Boolean> DetectUserDirectoriesInImageHeap = new HostedOptionKey<>(false);
 
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jdk/DefaultFileSystemSupport.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jdk/DefaultFileSystemSupport.java
new file mode 100644
index 0000000..d3cd4bc
--- /dev/null
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jdk/DefaultFileSystemSupport.java
@@ -0,0 +1,63 @@
+package com.oracle.svm.core.jdk;
+
+import com.oracle.svm.core.annotate.Alias;
+import com.oracle.svm.core.annotate.RecomputeFieldValue;
+import com.oracle.svm.core.annotate.Substitute;
+import com.oracle.svm.core.annotate.TargetClass;
+import com.r3.conclave.filesystem.jimfs.JimfsFileSystemProvider;
+import org.graalvm.nativeimage.ImageSingletons;
+import org.graalvm.nativeimage.hosted.Feature;
+
+import java.net.URI;
+import java.nio.file.FileSystem;
+import java.nio.file.FileSystems;
+import java.nio.file.spi.FileSystemProvider;
+
+public final class DefaultFileSystemSupport {
+    final FileSystemProvider provider;
+
+    public DefaultFileSystemSupport(FileSystemProvider provider) {
+        this.provider = provider;
+    }
+}
+
+/**
+ * This feature is enabled via <code>--features</code> on native-image.
+ */
+final class DefaultFileSystemFeature implements Feature {
+    @Override
+    public void duringSetup(DuringSetupAccess access) {
+        ImageSingletons.add(DefaultFileSystemSupport.class, new DefaultFileSystemSupport(JimfsFileSystemProvider.instance()));
+    }
+}
+
+/**
+ * This class is for allowing access to the private inner class {@link FileSystems.DefaultFileSystemHolder} and its members.
+ */
+@TargetClass(value = FileSystems.class, innerClass = "DefaultFileSystemHolder", onlyWith = JDK8OrEarlier.class)
+final class Target_java_nio_file_FileSystems_DefaultFileSystemHolder {
+    @Alias
+    @RecomputeFieldValue(kind = RecomputeFieldValue.Kind.None)
+    static FileSystem defaultFileSystem;
+}
+
+/**
+ * This class replaces {@link FileSystems} methods. {@link FileSystems} class is initialized at build time and affects
+ * all images, including native-image.
+ */
+@TargetClass(value = FileSystems.class, onlyWith = JDK8OrEarlier.class)
+final class Target_java_nio_file_FileSystems {
+    /**
+     * This method replaces {@link FileSystems#getDefault()} with a version which checks for whether the
+     * {@link DefaultFileSystemFeature} has been enabled, in which case it returns the {@link JimfsFileSystemProvider},
+     * otherwise it returns the {@link Target_java_nio_file_FileSystems_DefaultFileSystemHolder#defaultFileSystem}
+     * which is initialized at build time.
+     */
+    @Substitute
+    public static FileSystem getDefault() {
+        if (ImageSingletons.contains(DefaultFileSystemSupport.class)) {
+            return ImageSingletons.lookup(DefaultFileSystemSupport.class).provider.getFileSystem(URI.create("file:///"));
+        }
+        return Target_java_nio_file_FileSystems_DefaultFileSystemHolder.defaultFileSystem;
+    }
+}
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jdk/FileSystemProviderSupport.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jdk/FileSystemProviderSupport.java
index 4e55c1e..f4e2025 100644
--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jdk/FileSystemProviderSupport.java
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jdk/FileSystemProviderSupport.java
@@ -25,6 +25,7 @@
 
 package com.oracle.svm.core.jdk;
 
+import com.r3.conclave.filesystem.jimfs.JimfsFileSystemProvider;
 import java.nio.file.spi.FileSystemProvider;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -64,6 +65,7 @@ public final class FileSystemProviderSupport {
 
     @Platforms(Platform.HOSTED_ONLY.class)
     FileSystemProviderSupport(List<FileSystemProvider> installedProviders) {
+        installedProviders.add(JimfsFileSystemProvider.instance());
         this.installedProvidersMutable = installedProviders;
         this.installedProvidersImmutable = Collections.unmodifiableList(installedProviders);
     }
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jdk/JavaNetSubstitutions.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jdk/JavaNetSubstitutions.java
index 85e2c4a..7f78541 100644
--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jdk/JavaNetSubstitutions.java
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/jdk/JavaNetSubstitutions.java
@@ -39,6 +39,7 @@ import java.util.HashMap;
 import java.util.Hashtable;
 import java.util.List;
 
+import com.r3.conclave.filesystem.jimfs.Handler;
 import org.graalvm.nativeimage.ImageSingletons;
 import org.graalvm.nativeimage.Platform;
 import org.graalvm.nativeimage.Platforms;
@@ -153,6 +154,11 @@ public final class JavaNetSubstitutions {
             URLProtocolsSupport.put(RESOURCE_PROTOCOL, resourcesURLStreamHandler);
             return true;
         }
+        if (FILE_PROTOCOL.equals(protocol)) {
+            final Handler jimfsHandler = new Handler();
+            URLProtocolsSupport.put(protocol, jimfsHandler);
+            return true;
+        }
         try {
             URLStreamHandler handler = (URLStreamHandler) ReflectionUtil.lookupMethod(URL.class, "getURLStreamHandler", String.class).invoke(null, protocol);
             if (handler != null) {
diff --git a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/NativeLibraries.java b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/NativeLibraries.java
index d9b2596..e11730c 100644
--- a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/NativeLibraries.java
+++ b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/NativeLibraries.java
@@ -608,10 +608,12 @@ public final class NativeLibraries {
             return false;
         }
         for (CLibrary lib : annotated) {
-            if (lib.requireStatic()) {
-                addStaticNonJniLibrary(lib.value(), lib.dependsOn());
-            } else {
-                addDynamicNonJniLibrary(lib.value());
+            if (!OptionUtils.flatten(",", SubstrateOptions.ExcludeLibraries.getValue()).contains(lib.value())) {
+                if (lib.requireStatic()) {
+                    addStaticNonJniLibrary(lib.value(), lib.dependsOn());
+                } else {
+                    addDynamicNonJniLibrary(lib.value());
+                }
             }
         }
         annotated.clear();
diff --git a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/NativeBootImageViaCC.java b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/NativeBootImageViaCC.java
index 92e7346..d838ff7 100644
--- a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/NativeBootImageViaCC.java
+++ b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/NativeBootImageViaCC.java
@@ -125,8 +125,10 @@ public abstract class NativeBootImageViaCC extends NativeBootImage {
                     additionalPreOptions.add("-Wl,--dynamic-list");
                     additionalPreOptions.add("-Wl," + exportedSymbolsPath.toAbsolutePath());
 
-                    // Drop global symbols in linked static libraries: not covered by --dynamic-list
-                    additionalPreOptions.add("-Wl,--exclude-libs,ALL");
+                    if (!SubstrateOptions.ExportStaticSymbols.getValue()) {
+                        // Drop global symbols in linked static libraries: not covered by --dynamic-list
+                        additionalPreOptions.add("-Wl,--exclude-libs,ALL");
+                    }
                 } catch (IOException e) {
                     VMError.shouldNotReachHere();
                 }
@@ -155,7 +157,9 @@ public abstract class NativeBootImageViaCC extends NativeBootImage {
                     }
                     break;
                 case SHARED_LIBRARY:
-                    cmd.add("-shared");
+                    if (!SubstrateOptions.UseStaticLinking.getValue()) {
+                        cmd.add("-shared");
+                    }
                     break;
                 default:
                     VMError.shouldNotReachHere();
diff --git a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/sources/SourceCache.java b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/sources/SourceCache.java
index 8fcbce1..305b9ec 100644
--- a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/sources/SourceCache.java
+++ b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/sources/SourceCache.java
@@ -313,7 +313,7 @@ public class SourceCache {
             moduleName = ModuleSupport.getModuleName(clazz);
         }
 
-        if (moduleName != null) {
+        if (moduleName != null && !specialSrcRoots.isEmpty()) {
             for (String specialRootModule : specialRootModules) {
                 if (moduleName.equals(specialRootModule)) {
                     for (Path srcRoot : specialSrcRoots.get(specialRootModule)) {
diff --git a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/jdk/JNIRegistrationAwt.java b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/jdk/JNIRegistrationAwt.java
index dd43417..0ae578e 100644
--- a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/jdk/JNIRegistrationAwt.java
+++ b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/jdk/JNIRegistrationAwt.java
@@ -42,7 +42,7 @@ import org.graalvm.nativeimage.impl.InternalPlatform;
 import java.awt.GraphicsEnvironment;
 
 @Platforms({InternalPlatform.PLATFORM_JNI.class})
-@AutomaticFeature
+//@AutomaticFeature
 @SuppressWarnings({"unused"})
 public class JNIRegistrationAwt extends JNIRegistrationUtil implements Feature {
 
diff --git a/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/JNILibraryInitializer.java b/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/JNILibraryInitializer.java
index 2e01394..7630aed 100644
--- a/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/JNILibraryInitializer.java
+++ b/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/JNILibraryInitializer.java
@@ -30,6 +30,7 @@ import com.oracle.svm.core.jdk.NativeLibrarySupport;
 import com.oracle.svm.core.jdk.PlatformNativeLibrarySupport;
 import com.oracle.svm.jni.functions.JNIFunctionTables;
 import com.oracle.svm.jni.nativeapi.JNIJavaVM;
+import com.oracle.svm.core.SubstrateOptions;
 import org.graalvm.collections.EconomicMap;
 import org.graalvm.collections.Equivalence;
 import org.graalvm.nativeimage.c.function.CFunctionPointer;
@@ -111,6 +112,10 @@ public class JNILibraryInitializer implements NativeLibrarySupport.LibraryInitia
 
     @Override
     public void initialize(PlatformNativeLibrarySupport.NativeLibrary lib) {
+        if (SubstrateOptions.ExcludeLoadingNetwork.hasBeenSet() && SubstrateOptions.ExcludeLoadingNetwork.getValue()) {
+            return;
+        }
+        
         String libName = lib.getCanonicalIdentifier();
         PointerBase onLoadFunction;
         if (lib.isBuiltin()) {

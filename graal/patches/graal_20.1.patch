diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java
index f75af166933..17dd62388ad 100644
--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java
@@ -435,6 +435,18 @@ public class SubstrateOptions {
     @Option(help = "file:doc-files/UseMuslCHelp.txt", type = OptionType.Expert)//
     public static final HostedOptionKey<String> UseMuslC = new HostedOptionKey<>(null);
 
+    @Option(help = "Use static linking", type = OptionType.Expert)
+    public static final HostedOptionKey<Boolean> UseStaticLinking = new HostedOptionKey<>(false);
+
+    @Option(help = "Export symbols in linked static libraries", type = OptionType.Expert)
+    public static final HostedOptionKey<Boolean> ExportStaticSymbols = new HostedOptionKey<>(false);
+
+    @Option(help = "Default libraries to be excluded by the linker (list of comma-separated library names, i.e., dl,pthreads)", type = OptionType.Expert)
+    public static final HostedOptionKey<String[]> ExcludeLibraries = new HostedOptionKey<>(new String[]{});
+
+    @Option(help = "Exclude loading net library", type = OptionType.Expert)
+    public static final HostedOptionKey<Boolean> ExcludeLoadingNetwork = new HostedOptionKey<>(false);
+        
     @Option(help = "When set to true, the image generator verifies that the image heap does not contain a home directory as a substring", type = User)//
     public static final HostedOptionKey<Boolean> DetectUserDirectoriesInImageHeap = new HostedOptionKey<>(false);
 
diff --git a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/NativeLibraries.java b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/NativeLibraries.java
index d4a42aa62c9..ec05fe96cb4 100644
--- a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/NativeLibraries.java
+++ b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/NativeLibraries.java
@@ -558,7 +558,9 @@ public final class NativeLibraries {
             return false;
         }
         for (CLibrary lib : annotated) {
-            addLibrary(lib.value(), lib.requireStatic(), lib.dependsOn());
+            if (!OptionUtils.flatten(",", SubstrateOptions.ExcludeLibraries.getValue()).contains(lib.value())) {
+                addLibrary(lib.value(), lib.requireStatic());
+            }
         }
         annotated.clear();
         return true;
diff --git a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/NativeBootImageViaCC.java b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/NativeBootImageViaCC.java
index 050b4355d10..43a0e181f63 100644
--- a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/NativeBootImageViaCC.java
+++ b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/NativeBootImageViaCC.java
@@ -111,8 +111,10 @@ public abstract class NativeBootImageViaCC extends NativeBootImage {
                     additionalPreOptions.add("-Wl,--dynamic-list");
                     additionalPreOptions.add("-Wl," + exportedSymbolsPath.toAbsolutePath());
 
-                    // Drop global symbols in linked static libraries: not covered by --dynamic-list
-                    additionalPreOptions.add("-Wl,--exclude-libs,ALL");
+                    if (!SubstrateOptions.ExportStaticSymbols.getValue()) {
+                        // Drop global symbols in linked static libraries: not covered by --dynamic-list
+                        additionalPreOptions.add("-Wl,--exclude-libs,ALL");
+                    }
                 } catch (IOException e) {
                     VMError.shouldNotReachHere();
                 }
@@ -139,7 +141,11 @@ public abstract class NativeBootImageViaCC extends NativeBootImage {
                     cmd.add("-static");
                     break;
                 case SHARED_LIBRARY:
-                    cmd.add("-shared");
+                    if (SubstrateOptions.UseStaticLinking.getValue()) {
+                        cmd.add("-static");
+                    } else {
+                        cmd.add("-shared");
+                    }
                     break;
                 default:
                     VMError.shouldNotReachHere();
diff --git a/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/JNILibraryLoadFeature.java b/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/JNILibraryLoadFeature.java
index 1bbd54c7407..e2a6c116590 100644
--- a/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/JNILibraryLoadFeature.java
+++ b/substratevm/src/com.oracle.svm.jni/src/com/oracle/svm/jni/JNILibraryLoadFeature.java
@@ -30,6 +30,7 @@ import static com.oracle.svm.jni.nativeapi.JNIVersion.JNI_VERSION_1_4;
 import static com.oracle.svm.jni.nativeapi.JNIVersion.JNI_VERSION_1_6;
 import static com.oracle.svm.jni.nativeapi.JNIVersion.JNI_VERSION_1_8;
 
+import com.oracle.svm.core.SubstrateOptions;
 import org.graalvm.nativeimage.c.function.CFunction;
 import org.graalvm.nativeimage.hosted.Feature;
 import org.graalvm.nativeimage.c.function.CFunctionPointer;
@@ -81,6 +82,10 @@ class JNILibraryInitializer implements LibraryInitializer {
 
     @Override
     public void initialize(NativeLibrary lib) {
+        if (SubstrateOptions.ExcludeLoadingNetwork.hasBeenSet() && SubstrateOptions.ExcludeLoadingNetwork.getValue()) {
+            return;
+        }
+
         String name = getOnLoadName(lib.getCanonicalIdentifier(), lib.isBuiltin());
 
         /*

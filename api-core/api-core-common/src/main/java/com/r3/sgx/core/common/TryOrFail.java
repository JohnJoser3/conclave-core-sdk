// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: try.proto

package com.r3.sgx.core.common;

public final class TryOrFail {
  private TryOrFail() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Try_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Try_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_StackTraceElement_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_StackTraceElement_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Exception_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Exception_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\ttry.proto\"H\n\003Try\022\021\n\007success\030\001 \001(\014H\000\022\035\n" +
      "\007failure\030\002 \001(\0132\n.ExceptionH\000B\017\n\rSuccessO" +
      "rFail\"`\n\021StackTraceElement\022\021\n\tclassName\030" +
      "\001 \002(\t\022\022\n\nmethodName\030\002 \002(\t\022\020\n\010fileName\030\003 " +
      "\001(\t\022\022\n\nlineNumber\030\004 \002(\005\"\\\n\tException\022\026\n\016" +
      "exceptionClass\030\001 \002(\t\022\017\n\007message\030\002 \001(\t\022&\n" +
      "\nstackTrace\030\003 \003(\0132\022.StackTraceElementB+\n" +
      "\026com.r3.sgx.core.commonB\tTryOrFailP\001\242\002\003H" +
      "LW"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_Try_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Try_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Try_descriptor,
        new java.lang.String[] { "Success", "Failure", "SuccessOrFail", });
    internal_static_StackTraceElement_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_StackTraceElement_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_StackTraceElement_descriptor,
        new java.lang.String[] { "ClassName", "MethodName", "FileName", "LineNumber", });
    internal_static_Exception_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_Exception_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Exception_descriptor,
        new java.lang.String[] { "ExceptionClass", "Message", "StackTrace", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}

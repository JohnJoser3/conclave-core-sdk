plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm'
    id 'maven-publish'
}

group 'com.r3.conclave'
version '0.1-SNAPSHOT'

// TODO Use Zulu build with EC bug fix, or wait until they release their next JDK 11 version
//compileJava {
//    sourceCompatibility = JavaVersion.VERSION_11
//    targetCompatibility = JavaVersion.VERSION_11
//}

test {
    failFast = false
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

dependencies {
    api project(":conclave-common")

    // This is the "old" API which does all of the host-enclave heavy-lifting. Eventually api-core-host will be aborbed into this module.
    implementation project(':api-core:api-core-host')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    // Logging using the SLF4J API
    implementation "org.slf4j:slf4j-api:$slf4j_version"
    // Needed for communicating with Intel's attestation service
    // TODO Consider using Java 11's new HTTP client instead of this
    implementation "org.apache.httpcomponents:httpclient:$httpclient_version"
    // Needed to parse the JSON response from the IAS
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"

    // Native libraries for creating and communicating with an enclave.
    // TODO There's really no need to include all three dependencies. The host can only use the one that matches with
    //      the mode the enclave was built against. So consider a gradle plugin for the host that automatically adds the
    //      relevant dependency based on the enclave.
    runtimeOnly "com.r3.sgx:native-host-release:$oblivium_dependency_version"
    runtimeOnly "com.r3.sgx:native-host-debug:$oblivium_dependency_version"
    runtimeOnly "com.r3.sgx:native-host-simulation:$oblivium_dependency_version"

    testImplementation project(":conclave-enclave")
    testImplementation project(":enclave-dynamic-testing")
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"

    // Log4J for the runtime logging engine. We don't specify this as a production dependency to allow the client code
    // to specify their own binding.
    testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
}

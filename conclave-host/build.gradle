plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm'
}

// TODO Use Zulu build with EC bug fix, or wait until they release their next JDK 11 version
//compileJava {
//    sourceCompatibility = JavaVersion.VERSION_11
//    targetCompatibility = JavaVersion.VERSION_11
//}

dependencies {
    api project(":conclave-common")

    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    // Needed to parse the JSON response from the IAS
    compileOnly "com.fasterxml.jackson.core:jackson-databind:$jackson_version"

    implementation "io.github.classgraph:classgraph:$classgraph_version"
    // Logging using the SLF4J API
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    // Native libraries for creating and communicating with an enclave.
    // TODO There's really no need to include all three dependencies. The host can only use the one that matches with
    //      the mode the enclave was built against. So by bundling all three modes we're unnecessarily bloating the
    //      host. Consider a gradle plugin for the host that automatically adds the relevant dependency based on the enclave.
    runtimeOnly "com.r3.conclave:native-host-release:${rootProject.version}"
    runtimeOnly "com.r3.conclave:native-host-debug:${rootProject.version}"
    runtimeOnly "com.r3.conclave:native-host-simulation:${rootProject.version}"
    runtimeOnly "com.r3.conclave:native-host-shared:${rootProject.version}"

    testImplementation project(":internal-testing")
    testImplementation "org.junit.jupiter:junit-jupiter:$junit_jupiter_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"

    // Log4J for the runtime logging engine. We don't specify this as a production dependency to allow the client code
    // to specify their own binding.
    testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
}

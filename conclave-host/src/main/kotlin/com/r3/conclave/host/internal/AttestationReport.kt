package com.r3.conclave.host.internal

import com.fasterxml.jackson.annotation.JsonFormat
import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL
import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.core.JsonParser
import com.fasterxml.jackson.databind.*
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.fasterxml.jackson.databind.deser.std.StdDeserializer
import com.fasterxml.jackson.databind.ser.std.StdSerializer
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule
import com.r3.conclave.common.SHA256Hash
import com.r3.conclave.common.internal.getRemainingBytes
import com.r3.conclave.common.internal.parseHex
import com.r3.conclave.common.internal.toHexString
import com.r3.sgx.core.common.ByteCursor
import com.r3.sgx.core.common.Cursor
import com.r3.sgx.core.common.SgxQuote
import java.time.Instant

/**
 * Definitions taken from https://api.trustedservices.intel.com/documents/sgx-attestation-api-spec.pdf.
 *
 * The Attestation Verification Report is a data structure returned by the Attestation Service for IntelÂ® SGX to the
 * Service Provider. It contains a cryptographically signed report of verification of the identity of ISV enclave and
 * the Trusted Computing Base (TCB) of the platform.
 *
 * @property id Representation of unique identifier of the Attestation Verification Report.
 *
 * @property timestamp Representation of date and time the Attestation Verification Report was created.
 *
 * @property version Integer that denotes the version of the Verification Attestation Evidence API that has been used to
 * generate the report (currently set to 3). Service Providers should verify this field to confirm that the report was
 * generated by the intended API version, instead of a different API version with potentially different security properties.
 *
 * @property revocationReason Integer corresponding to revocation reason code for a revoked EPID group listed in EPID
 * Group CRL. Allowed values are described in [RFC 5280](https://www.ietf.org/rfc/rfc5280.txt). This field will only be
 * present if value of isvEnclaveQuoteStatus is equal to GROUP_REVOKED.
 *
 * @property pseManifestStatus This field will only be present if the SGX Platform Service Security Property Descriptor
 * (pseManifest) is provided in Attestation Evidence Payload and isvEnclaveQuoteStatus is equal to OK, GROUP_OUT_OF_DATE
 * or CONFIGURATION_NEEDED.
 *
 * @property pseManifestHash SHA-256 calculated over SGX Platform Service Security Property Descriptor as received in
 * Attestation Evidence Payload. This field will only be present if pseManifest field is provided in Attestation Evidence
 * Payload.
 *
 * @property platformInfoBlob A TLV containing an opaque binary blob that the Service Provider and the ISV SGX Application
 * are supposed to forward to SGX Platform SW. This field will only be present if one the following conditions is met:
 * * isvEnclaveQuoteStatus is equal to GROUP_REVOKED, GROUP_OUT_OF_DATE or CONFIGURATION_NEEDED,
 * * pseManifestStatus is equal to one of the following values: OUT_OF_DATE, REVOKED or RL_VERSION_MISMATCH.
 *
 * @property nonce A string that represents a nonce value provided by SP in Attestation Evidence Payload. This field will
 * only be present if nonce field is provided in Attestation Evidence Payload.
 *
 * @property epidPseudonym Byte array representing EPID Pseudonym that consists of the concatenation of EPID B (64 bytes)
 * & EPID K (64 bytes) components of EPID signature. If two linkable EPID signatures for an EPID Group have the same EPID
 * Pseudonym, the two signatures were generated using the same EPID private key. This field will only be present if
 * Attestation Evidence Payload contains Quote with linkable EPID signature.
 */
@JsonInclude(NON_NULL)
class AttestationReport(
        val id: String,

        val isvEnclaveQuoteStatus: QuoteStatus,

        @JsonSerialize(using = SgxQuoteSerializer::class)
        @JsonDeserialize(using = SgxQuoteDeserializer::class)
        val isvEnclaveQuoteBody: ByteCursor<SgxQuote>,

        @JsonSerialize(using = Base16Serializer::class)
        @JsonDeserialize(using = Base16Deserializer::class)
        val platformInfoBlob: ByteArray? = null,

        val revocationReason: Int? = null,

        val pseManifestStatus: ManifestStatus? = null,

        @JsonSerialize(using = Sha256Serializer::class)
        @JsonDeserialize(using = Sha256Deserializer::class)
        val pseManifestHash: SHA256Hash? = null,

        val nonce: String? = null,

        val epidPseudonym: ByteArray? = null,

        @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss.SSSSSS", timezone = "UTC")
        val timestamp: Instant,

        val version: Int
) {
    companion object {
        fun register(objectMapper: ObjectMapper): ObjectMapper {
            objectMapper.registerModule(KotlinModule())
            objectMapper.registerModule(JavaTimeModule())
            return objectMapper
        }
    }

    private class Base16Serializer : StdSerializer<ByteArray>(ByteArray::class.java) {
        override fun serialize(value: ByteArray, gen: JsonGenerator, provider: SerializerProvider) {
            gen.writeString(value.toHexString())
        }
    }

    private class Base16Deserializer : StdDeserializer<ByteArray>(ByteArray::class.java) {
        override fun deserialize(p: JsonParser, ctxt: DeserializationContext): ByteArray = parseHex(p.valueAsString)
    }

    private class SgxQuoteSerializer : JsonSerializer<ByteCursor<SgxQuote>>() {
        override fun serialize(value: ByteCursor<SgxQuote>, gen: JsonGenerator, provider: SerializerProvider) {
            gen.writeBinary(value.read().getRemainingBytes())
        }
    }

    private class SgxQuoteDeserializer : JsonDeserializer<ByteCursor<SgxQuote>>() {
        override fun deserialize(p: JsonParser, ctxt: DeserializationContext): ByteCursor<SgxQuote> {
            return Cursor(SgxQuote, p.binaryValue)
        }
    }

    private class Sha256Serializer : StdSerializer<SHA256Hash>(SHA256Hash::class.java) {
        override fun serialize(value: SHA256Hash, gen: JsonGenerator, provider: SerializerProvider) {
            gen.writeString(value.toString())
        }
    }

    private class Sha256Deserializer : StdDeserializer<SHA256Hash>(SHA256Hash::class.java) {
        override fun deserialize(p: JsonParser, ctxt: DeserializationContext): SHA256Hash {
            return SHA256Hash.parse(p.valueAsString)
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Global variables
////////////////////////////////////////////////////////////////////////////////////////////////////
ext {
    // Environment variables loaded from the system
    // Add any environment variable to the argument list if it needs to be accessible by Gradle
    environment = getEnvironmentVariables(
            'GRAAL_HOME',
    )

    // Directories and files paths
    graalDir = "${environment.GRAAL_HOME}"
    capCacheDir = "${project.buildDir}/cap-cache"
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Tasks
////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Generates the CAP cache by running native-image on the cap-cache subproject.
 * The CAP cache is packaged in the graal jar file together with the tarball of the Graal distribution.
 * Relevant native-image options:
 * -H:±ExitAfterCAPCache    Exit image generation after C Annotation Processor Cache creation. Default: - (disabled).
 * -H:±NewCAPCache          Create a C Annotation Processor Cache. Will erase any previous cache at that same location. Default: - (disabled).
 * -H:CAPCacheDir           Directory where information generated by the CAnnotation Processor are cached.
 */
task generateCAPCache(type: Exec) {
    outputs.dir(capCacheDir)

    doFirst {
        commandLine "${graalDir}/bin/native-image", '--shared',
                '-H:+ExitAfterCAPCache', '-H:+NewCAPCache', "-H:CAPCacheDir=$capCacheDir",
                "--no-fallback",
                "--language:js",
                "--language:python",
                "-H:Name=cap-cache"
    }
}

jar {
    dependsOn generateCAPCache

    into("com/r3/conclave/graalvm/cap-cache") {
        from(capCacheDir) {
            include '**/*'
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper functions
////////////////////////////////////////////////////////////////////////////////////////////////////

// The function loads the environments variables from the system
// Input: List of all environment variables that should be loaded by Gradle
// Output: A map with the environment variables that were requested
// Key of the map: environment variable name
// Value of the map: environment variable value
static Map<String, String> getEnvironmentVariables(String... envNames) {
    return envNames.collectEntries {envName -> [(envName): System.getenv(envName)?: ""] }
}

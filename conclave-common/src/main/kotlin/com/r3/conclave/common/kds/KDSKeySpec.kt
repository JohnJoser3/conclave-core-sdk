package com.r3.conclave.common.kds

import com.r3.conclave.common.EnclaveConstraint

/**
 * A key specification defining the stable public or private key to be generated by a KDS.
 *
 * @property name The "name" of the key to be obtained. This is part of the identity of the key: for a different
 * name, the KDS will produce a different key.
 *
 * @property masterKeyType The master key that will be used to derive the stable key from.
 *
 * @property policyConstraint The enclave constraint which the target enclave must satisfy in order for it to retrieve
 * the private key from the KDS. A client can specify any constraint to get a public key but only the matching
 * enclave can get the corresponding private key.
 *
 * The policy constraint string is used directly, without modification, in the derivation of the stable key. This
 * means, for example, two contraint strings which differ by whitespace will produce different keys even though they
 * are the same constraint. However an [IllegalArgumentException] will be thrown if the string is not a valid
 * [EnclaveConstraint].
 */
class KDSKeySpec(val name: String, val masterKeyType: MasterKeyType, val policyConstraint: String) {
    init {
        try {
            EnclaveConstraint.parse(policyConstraint)
        } catch (e: Exception) {
            throw IllegalArgumentException("Invalid policy constraint: ${e.message}")
        }
    }

    override fun hashCode(): Int {
        var result = 31 * name.hashCode()
        result = 31 * result + masterKeyType.hashCode()
        result = 31 * result + policyConstraint.hashCode()
        return result
    }

    override fun equals(other: Any?): Boolean {
        if (other === this) return true
        if (other !is KDSKeySpec) return false
        return other.name == name && other.masterKeyType == masterKeyType && other.policyConstraint == policyConstraint
    }

    override fun toString(): String {
        return "KDSKeySpec(name=$name, masterKeyType=$masterKeyType, policyConstraint=$policyConstraint)"
    }
}
